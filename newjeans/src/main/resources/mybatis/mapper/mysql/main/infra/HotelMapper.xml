<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ador.infra.hotel.HotelDao">

	<resultMap type="com.ador.infra.hotel.HotelDto" id="resultMapObj"></resultMap>
	
	<sql id="selectCommon">
		FROM 
			hotel as a
		LEFT JOIN  
			(SELECT 
				hotel_seq,
				htrseq,
				htrRoomName,
				htrRoomPrice,
				htrStay,
				bedoption,
				aircondNy,
				bathNy,
				tvNy,
				wifiNy,
				coffeeNy,
				ROW_NUMBER() OVER (PARTITION BY hotel_seq ORDER BY htrRoomPrice) AS rn
			 FROM 
				hotelroom
			) as b
		ON a.htseq = b.hotel_seq AND b.rn = 1
		LEFT JOIN
			(SELECT 
				hotel_seq, MIN(htrRoomPrice) AS minPrice
			 FROM   
				hotelroom
			 GROUP BY hotel_seq
			) as c	  
		ON a.htseq = c.hotel_seq
		LEFT JOIN 
			(SELECT 
				hotel_seq,
				AVG(htrestars) AS average_star,
       			COUNT(*) AS review_count
	 	     FROM
				hotelreview
    			GROUP BY hotel_seq
    		) AS avg_table 
				ON a.htseq = avg_table.hotel_seq
			where 1=1
				AND a.htseq = htseq
				   <!-- (체크박스) 별점으로 검색하기 -->
				   <if test="starsArr != null and starsArr.length != 0"> 
				   		AND TRUNCATE(avg_table.average_star, 0) IN (
            		<foreach collection="starsArr" item="item" separator=",">
                		#{item}
            		</foreach>
        		    )
   				  </if>
				   <!-- 성급으로 검색하기 -->
				   <if test="classArr != null and classArr.length != 0">
				   		AND TRUNCATE(htClassSearch, 0) IN (
            		<foreach collection="classArr" item="item" separator=",">
                		#{item}
            		</foreach>
        		    )
   				  </if>
   				  <!-- 호텔서비스 검색하기 -->
   				  <if test="BreakfastNyArr != null and BreakfastNyArr.length != 0">
				   		AND TRUNCATE(htBreakfastNy, 0) IN (
            		<foreach collection="BreakfastNyArr" item="item" separator=",">
                		#{item}
            		</foreach>
        		    )
   				  </if>
   				  
   				  
			<if test="shDelNy != null and !shDelNy.equals('')">AND htDelNy = #{shDelNy}</if> <!-- 삭제 여부 -->
			
			<!-- 레스토랑 -->
			<if test="shRestaurant != null and !shRestaurant.equals('')">AND htRestaurantNy = #{shRestaurant}</if>
			
			<!-- 스파/온천 -->
			<if test="shSpa != null and !shSpa.equals('')">AND htSpaNy = #{shSpa}</if>
			
			<!-- 피트니스센터 -->
			<if test="shFitnessCenter != null and !shFitnessCenter.equals('')">AND htFitnessCenterNy = #{shFitnessCenter}</if>
			
			<!-- 수영장 -->
			<if test="shPool != null and !shPool.equals('')">AND htPoolNy = #{shPool}</if>
			
			<!-- 라운지 -->
			<if test="shlounge != null and !shlounge.equals('')">AND htloungeNy = #{shlounge}</if>
			
			<!-- 물품보관소 -->
			<if test="shStockRoom != null and !shStockRoom.equals('')">AND htStockRoomNy = #{shStockRoom}</if>
			
			<!-- 무료주차 -->
			<if test="shParking != null and !shParking.equals('')">AND htParkingNy = #{shParking}</if>
			
			<!-- 공항셔틀버스 -->
			<if test="shShuttleBus != null and !shShuttleBus.equals('')">AND htShuttleBusNy = #{shShuttleBus}</if>
			
			<!-- 조식 -->
			<if test="shBreakfast != null and !shBreakfast.equals('')">AND htBreakfastNy = #{shBreakfast}</if>
			
			<!-- 룸서비스 -->
			<if test="shRoomService != null and !shRoomService.equals('')">AND htRoomServiceNy = #{shRoomService}</if>
			
			<!-- 기타 -->
			<if test="shElse != null and !shElse.equals('')">AND htElseNy = #{shElse}</if>
			 
			<!-- 달력 -->
			<choose>
				<when test="shOptionDate == 1">AND a.htRegDate BETWEEN #{shDateStart} AND #{shDateEnd}</when> 
				<when test="shOptionDate == 2">AND a.htReviseDate BETWEEN #{shDateStart} AND #{shDateEnd}</when> 
			</choose>
			
			<!-- 검색 구분 -->
			<choose> 
				<when test="shOption == 1">AND htseq = #{shValue}</when>
				<when test="shOption == 2">AND htName LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 3">AND htStarSearch LIKE CONCAT('%',#{shValue},'%')</when>
				<when test="shOption == 4">AND htClassSearch = #{shValue}</when>
			</choose> 
			
			<!-- 호텔리스트 검색 -->
			<if test="shLListhtName != null and !shLListhtName.equals('')">AND htName LIKE CONCAT('%',#{shLListhtName},'%')</if>
			
			<!-- 호텔 상세 페이지 달력 -->
	</sql>
	    
	<select id="selectOneCount">
		SELECT COUNT(*)
		<include refid="selectCommon"/>	
	</select>
	
	<select id="hotelList" resultMap="resultMapObj">   
	select aa.* from (
		select
			a.htseq,
			a.htName,
			a.htAddress, 
			a.htcountry,
			a.htDesc,
		    a.htDelNy,
			a.htRegDate,
			a.htReviseDate,
			a.htNotice,
			a.htMap,
			a.htInclusionItems,
			a.htNameSearch,
			a.htPriceSearch,
			a.htStarSearch,
			a.htClassSearch,
			a.htRestaurantNy,
			a.htSpaNy,
			a.htFitnessCenterNy,
			a.htPoolNy,
			a.htloungeNy,
			a.htStockRoomNy,
			a.htParkingNy,
			a.htShuttleBusNy,
			(select count(a.htBreakfastNy) from hotel a where htBreakfastNy = 1) as Breakfastcount,
			a.htRoomServiceNy,
			a.htElseNy,
			b.htrseq,
			b.htrRoomName,
			b.htrRoomPrice,
			b.htrStay,
			b.bedoption,
			b.aircondNy,
			b.bathNy,
			b.tvNy,
			b.wifiNy,   
			b.coffeeNy,
			b.hotel_seq,
			avg_table.average_star,
<!-- 			FLOOR(avg_table.average_star) AS average_star,  -->
    		avg_table.review_count
		<include refid="selectCommon"/>
		order by
			a.htseq desc
		) aa
		limit #{rowNumToShow} offset #{startRnumForMysql}
	</select>
	
	<!-- 호텔 상세페이지(사용자 페이지) 리스트 -->
	<select id="hotelDetailList" resultMap="resultMapObj">
		select
			a.htseq,
			a.htName,
			a.htAddress, 
			a.htcountry,
			a.htDesc,
		    a.htDelNy,
			a.htRegDate,
			a.htReviseDate,
			a.htNotice,
			a.htMap,
			a.htInclusionItems,
			a.htNameSearch,
			a.htPriceSearch,
			a.htStarSearch,
			a.htClassSearch,
			a.htRestaurantNy,
			a.htSpaNy,
			a.htFitnessCenterNy,
			a.htPoolNy,
			a.htloungeNy,
			a.htStockRoomNy,
			a.htParkingNy,
			a.htShuttleBusNy,
			a.htBreakfastNy,
			a.htRoomServiceNy,
			a.htElseNy,
			b.htrseq,
			b.htrRoomName,
			b.htrRoomPrice,
			b.htrStay,
			b.bedoption,
			b.aircondNy,
			b.bathNy,
			b.tvNy,  
			b.wifiNy,   
			b.coffeeNy,
			b.hotel_seq
		from 
			hotel a 
		left join
			hotelroom b on b.hotel_seq = a.htseq
		where 1=1
			and a.htseq = #{htseq}
		order by 
			b.htrRoomPrice asc  
	</select>  
	
	<insert id="hotelInsert">
		insert into hotel (
		    htName,
		    htAddress,
		    htcountry,
		    htDesc,
		    htDelNy,
		    htRegDate,
		    htReviseDate,
		    htNotice,
		    htMap,
		    htInclusionItems,
		    htNameSearch,
		    htPriceSearch,
		    htStarSearch,
		    htClassSearch,
		    htRestaurantNy,
		    htSpaNy,
		    htFitnessCenterNy,
		    htPoolNy,
		    htloungeNy,
		    htStockRoomNy,
		    htParkingNy,
		    htShuttleBusNy,
		    htBreakfastNy,
		    htRoomServiceNy,
		    htElseNy
		) values (
			#{htName},
			#{htAddress},
			#{htcountry},
			#{htDesc},
			0,
			now(),
			now(),
			#{htNotice},
			#{htMap},
			#{htInclusionItems},
			#{htNameSearch},
			#{htPriceSearch},
			#{htStarSearch},
			#{htClassSearch},
			#{htRestaurantNy},
			#{htSpaNy},
			#{htFitnessCenterNy},
			#{htPoolNy},
			#{htloungeNy},
			#{htStockRoomNy},
			#{htParkingNy},
			#{htShuttleBusNy},
			#{htBreakfastNy},
			#{htRoomServiceNy},
			#{htElseNy}
		) 
	</insert>     
	
	<!-- 호텔 상세 페이지 -->
<!-- 	<select id="hotelSelectOne" resultMap="resultMapObj"> -->
<!-- 		select   -->
<!-- 		 	a.htseq, -->
<!-- 		    a.htName, -->
<!-- 		    a.htAddress,         -->
<!-- 		    a.htcountry, -->
<!-- 		    a.htDesc, -->
<!-- 		    a.htDelNy, -->
<!-- 		    a.htRegDate, -->
<!-- 		    a.htReviseDate, -->
<!-- 		    a.htNotice, -->
<!-- 		    a.htMap, -->
<!-- 		    a.htInclusionItems, -->
<!-- 		    a.htNameSearch, -->
<!-- 		    a.htPriceSearch, -->
<!-- 		    a.htStarSearch, -->
<!-- 		    a.htClassSearch, -->
<!-- 		    a.htRestaurantNy, -->
<!-- 		    a.htSpaNy, -->
<!-- 		    a.htFitnessCenterNy, -->
<!-- 		    a.htPoolNy, -->
<!-- 		    a.htloungeNy,  -->
<!-- 		    a.htStockRoomNy, -->
<!-- 		    a.htParkingNy, -->
<!-- 		    a.htShuttleBusNy, -->
<!-- 		    a.htBreakfastNy, -->
<!-- 		    a.htRoomServiceNy, -->
<!-- 		    a.htElseNy, -->
<!-- 		    c.htrseq, -->
<!-- 		    c.htrRoomName, -->
<!-- 		    c.htrRoomPrice,   -->
<!-- 			c.htrStay,    -->
<!-- 			c.bedoption, -->
<!-- 			c.aircondNy, -->
<!-- 			c.bathNy, -->
<!-- 			c.tvNy,  -->
<!-- 			c.wifiNy,    -->
<!-- 			c.coffeeNy, -->
<!-- 			c.hotel_seq     -->
<!-- 		from -->
<!-- 			hotel a     -->
<!-- 		left join (select * from hotelroom b order by b.htrRoomPrice limit 1) c on c.hotel_seq = a.htseq -->
<!-- 	    where 1=1  -->
<!-- 	    	AND a.htseq = #{htseq} -->
<!-- 	</select> -->

	<select id="hotelSelectOne" resultMap="resultMapObj">
		select  
			a.htseq,
			a.htName,
			a.htAddress,
			a.htcountry,
			a.htDesc,
		    a.htDelNy,
			a.htRegDate ,
			a.htReviseDate,
			a.htNotice,
			a.htMap,
			a.htInclusionItems,
			a.htNameSearch,
			a.htPriceSearch,
			a.htStarSearch,
			a.htClassSearch,
			a.htRestaurantNy,
			a.htSpaNy,
			a.htFitnessCenterNy,
			a.htPoolNy,
			a.htloungeNy,
			a.htStockRoomNy,
			a.htParkingNy,
			a.htShuttleBusNy,
			a.htBreakfastNy,
			a.htRoomServiceNy,
			a.htElseNy,
			b.htrseq,
			b.htrRoomName,
			b.htrRoomPrice,
			b.htrStay,
			b.bedoption,
			b.aircondNy,
			b.bathNy,
			b.tvNy,
			b.wifiNy,   
			b.coffeeNy,
			b.hotel_seq,
			avg_table.average_star,
    		avg_table.review_count
		FROM 
			hotel as a
		LEFT JOIN  
			(SELECT 
				hotel_seq,
				htrseq,
				htrRoomName,
				htrRoomPrice,
				htrStay,
				bedoption,
				aircondNy,
				bathNy,
				tvNy,
				wifiNy,
				coffeeNy,
			ROW_NUMBER() OVER (PARTITION BY hotel_seq ORDER BY htrRoomPrice) AS rn
			FROM hotelroom
			) as b
			ON a.htseq = b.hotel_seq AND b.rn = 1
			LEFT JOIN
			(SELECT 
			hotel_seq, MIN(htrRoomPrice) AS minPrice
		 	FROM   
			hotelroom
			 GROUP BY hotel_seq
			) as c	  
			ON a.htseq = c.hotel_seq
			LEFT JOIN 
			(SELECT 
				hotel_seq,
				AVG(htrestars) AS average_star,
       			COUNT(*) AS review_count
	 	     FROM
				hotelreview
    			GROUP BY hotel_seq
    		) AS avg_table 
				ON a.htseq = avg_table.hotel_seq
			where 1=1
				and a.htseq = #{htseq}
	</select>
	
	<!-- hotel, hotelroom 연결 -->
	<select id="selectListHotelRoom" resultMap="resultMapObj">
		select
			b.htrseq,
			b.htrRoomName,
			b.htrRoomPrice,
			b.htrStay,
			b.htrDelNy,
			b.bedoption,
			b.aircondNy,
			b.bathNy,
			b.tvNy,
			b.wifiNy,   
			b.coffeeNy,
			b.hotel_seq
		from 
			hotelroom b
		where 1=1
			and b.htrDelNy = 0
	</select>
	 
	<update id="hotelUpdate">
		update hotel
		set
		 	htName = #{htName},
		    htAddress = #{htAddress},
		    htcountry = #{htcountry},
		    htDesc = #{htDesc},
		    htDelNy = 0,
		    htReviseDate = now(),
		    htNotice = #{htNotice},
		    htMap = #{htMap},
		    htInclusionItems = #{htInclusionItems},
		    htNameSearch = #{htNameSearch},	
		    htPriceSearch = #{htPriceSearch},
		    htStarSearch = #{htStarSearch},
		    htClassSearch = #{htClassSearch},
		    htRestaurantNy = #{htRestaurantNy},
		    htSpaNy = #{htSpaNy},
		    htFitnessCenterNy = #{htFitnessCenterNy},
		    htPoolNy = #{htPoolNy},
		    htloungeNy = #{htloungeNy},
		    htStockRoomNy = #{htStockRoomNy},
		    htParkingNy = #{htStockRoomNy},
		    htShuttleBusNy = #{htShuttleBusNy},
		    htBreakfastNy = #{htBreakfastNy},
		    htRoomServiceNy= #{htRoomServiceNy},
		    htElseNy = #{htElseNy}
		where 1=1
			and htseq = #{htseq}
	</update>
	
	<update id="uelete">
		update hotel
		set 
			htDelNy = 1
		where 1=1
			and htseq = #{htseq}
	</update>
	
	<delete id="delete">
		delete from hotel
		where 1=1  
			and htseq = #{htseq}
	</delete>
	
	<!-- S3 파일 업로드 -->
	<insert id="insertUploaded">
		insert into hotelUploaded(
			htutype,
			htudefaultNy,
			htusort,
			htupath,
			htuoriginalName,
			htuuuidName,
			htuext,
			htusize,
			htudelNy,
			htupseq,
	 		hturegIp,
		 	hturegSeq,
		 	hturegDeviceCd,
			hturegDateTime,
		 	hturegDateTimeSvr
		) values (
			#{htutype},
			#{htudefaultNy},
			#{htusort},
			#{htupath},
			#{htuoriginalName},
			#{htuuuidName},
			#{htuext},
			#{htusize},
			0,
			11,
			#{hturegIp},
			#{hturegSeq},
			#{hturegDeviceCd},
			#{hturegDateTime},
			#{hturegDateTimeSvr}
		)
	</insert>
	
	
	
	
	<!-- 상세페이지에서 hotelbooking, hotelbookingmenu insert -->
	<insert id="hotelBookingInsert" useGeneratedKeys="true" keyProperty="htbseq">
		 INSERT INTO hotelbooking (
		 		htbcheckIn,	
		 		htbcheckOut,
		 		htbTotalPrice,
		 		htbPaymentType,
		 		htbSettleDate,
		 		htbRegDate,
		 		htbEditDate,
		 		htbDelNy,
		 		htbAgreeContentNy,
		 		hotelMember_htmSeq
			) values (
				#{htbcheckIn},
				#{htbcheckOut},
				#{htbTotalPrice},
				null,
				null,
				now(),
				now(),
				0,
				1,
				#{hotelMember_htmSeq}
			)
	</insert>
	
	<insert id="hotelBookingMenuInsert" parameterType="map">
		INSERT INTO hotelbookingmenu (
			htbmUseNy, 
			htbmDelNy, 
			hotelbooking_htbseq, 
			hotelRoom_htrseq
		) values 
		<foreach collection="menuSeqs" item="menuSeq" separator=",">
			(
				1,
				0,
				#{htbseq}, 
				#{menuSeq}
			)
		</foreach>
	</insert>
	
	
    <!-- 결제페이지에 결제정보 출력--> 
	<select id="paymentSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
		select
			a.htmSeq,
			a.htmUserName,
			a.htmPhoneNumber,
			a.htmEmail,
			b.htbseq,
			b.htbcheckIn,
			b.htbcheckOut,
			b.htbTotalPrice
		from hotelbooking as b 
			left join hotelmember as a
				on b.hotelMember_htmSeq = a.htmSeq
		where 1=1
			and b.htbseq = #{htbseq}  
	</select>
	
    <!-- 결제페이지에 hotelBookingMenu 테이블 정보 출력 -->
	<select id="paymentSelectList" resultMap="resultMapObj" parameterType="String" resultType="map">
		select
			c.htrRoomName,
		    c.htrRoomPrice
		from hotelbookingmenu as d 
			left join hotelroom as c
				on d.hotelRoom_htrseq = c.htrseq 
			left join hotelbooking as b 
				on d.hotelbooking_htbseq = b.htbseq
		where 1=1
			and htbseq = #{htbseq}
	</select>

    <!-- 결제페이지에 hotel 테이블 정보 출력 -->
    <!-- DISTINCT를 사용해서 쿼리가 특정 칼럼만 중복되지 않도록 보장하면서 중복을 제거 -->
    <select id="paymentHotelSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
    	select DISTINCT
			e.htName,
		    e.htAddress
		from 
			hotelbookingmenu as d
			left join hotelroom as c
				on d.hotelRoom_htrseq = c.htrseq
			left join hotel as e
				on c.hotel_seq = e.htseq
			left join hotelbooking as b
				on d.hotelbooking_htbseq = b.htbseq
     	where 1=1
     		and htbseq = #{htbseq}
    </select>
    
    <!-- 결제 정보 업데이트 -->
    <update id="bookingUpdate">
    	update hotelbooking
    	set 
    		htbPaymentType = #{htbPaymentType},
    		htbSettleDate = now()
    	where 1=1
    		and htbseq = #{htbseq} 
    </update> 
    
    
   
    
    <sql id="bookingHistorySelectCommon">
	    from 
	    	hotelbookingmenu as a 
		left join hotelroom as b
			on a.hotelRoom_htrseq = b.htrseq
		left join hotelbooking as c
			on a.hotelbooking_htbseq = c.htbseq
		left join hotelmember as d
			on c.hotelMember_htmSeq = d.htmSeq
		left join hotel as e 
			on b.hotel_seq = e.htseq 
		where 1=1 
			and d.htmSeq = #{htmSeq}
    </sql>
    
    <select id="bookingHistorySelectOneCount">
		SELECT COUNT(DISTINCT c.htbseq) 
		<include refid="bookingHistorySelectCommon"/>	
	</select>
    
    <!-- 예약 내역 리스트 -->
    <select id="bookingHistorySelectList" resultMap="resultMapObj">
    select aa.* from (
    	select DISTINCT
    			c.htbseq,
				c.htbcheckIn,
			    c.htbcheckOut,
			    c.htbTotalPrice,
			    c.htbSettleDate,
			    d.htmSeq,
			    d.htmUserName,
			    e.htseq,
			    e.htName
	    <include refid="bookingHistorySelectCommon"/>	
		order by
			c.htbSettleDate desc
		) aa
		limit #{rowNumToShow} offset #{startRnumForMysql}
    </select>
    
    <!-- 예약 내역 상세페이지 -->
<!--     <select id="bookingHistoryDetailsSelectOne" resultMap="resultMapObj"> -->
<!-- 	    select  -->
<!-- 			e.htseq, -->
<!-- 		    e.htName, -->
<!-- 			b.htrseq, -->
<!-- 		    b.htrRoomName, -->
<!-- 		    b.htrRoomPrice -->
<!-- 		from hotelbookingmenu as a  -->
<!-- 			left join hotelroom as b -->
<!-- 				on a.hotelRoom_htrseq = b.htrseq -->
<!-- 			left join hotelbooking as c -->
<!-- 				on a.hotelbooking_htbseq = c.htbseq -->
<!-- 			left join hotelmember as d -->
<!-- 				on c.hotelMember_htmSeq = d.htmSeq -->
<!-- 			left join hotel as e  -->
<!-- 				on b.hotel_seq = e.htseq  -->
<!-- 		where 1=1  -->
<!-- 			and c.htbseq = #{htbseq} -->
<!--     </select> -->
    
    <select id="bookingHistoryDetailsSelectList" resultMap="resultMapObj"> 
    	 select 
			e.htseq,
		    e.htName,
			b.htrseq,
		    b.htrRoomName,
		    b.htrRoomPrice
		from hotelbookingmenu as a 
			left join hotelroom as b
				on a.hotelRoom_htrseq = b.htrseq
			left join hotelbooking as c
				on a.hotelbooking_htbseq = c.htbseq
			left join hotelmember as d
				on c.hotelMember_htmSeq = d.htmSeq
			left join hotel as e 
				on b.hotel_seq = e.htseq 
		where 1=1 
			and c.htbseq = #{htbseq}
    </select> 

 





 

	  
</mapper>

